package simpledb;

import java.io.IOException;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;
    private List<OpIterator> opIterators;
    private HashMap<String, Tuple> joinedTuples = new HashMap<>();
    private Tuple tuple1 = null;
    private Tuple tuple2 = null;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        opIterators = new ArrayList<>();
        opIterators.add(child1);
        opIterators.add(child2);
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc tupleDesc1 = child1.getTupleDesc();
        TupleDesc tupleDesc2 = child2.getTupleDesc();
        return TupleDesc.merge(tupleDesc1, tupleDesc2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException, NoSuchFieldException, IOException {
        // some code goes here
        super.open();
        this.child1.open();
        this.child2.open();
    }

    public void close() {
        // some code goes here
        this.child2.close();
        this.child1.close();
        super.close();
    }

    public void rewind() throws DbException, NoSuchElementException,
            TransactionAbortedException, NoSuchFieldException, IOException {
        // some code goes here
        close();
        open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException, NoSuchFieldException, IOException {
        // some code goes here
        while (child1.hasNext() || tuple2 != null) {
            if(tuple2 == null) {
                tuple1 = child1.next();
            }
            while (child2.hasNext()) {
                tuple2 = child2.next();
                if (p.filter(tuple1, tuple2)) {
                    Tuple newTuple = new Tuple(TupleDesc.merge(tuple1.getTupleDesc(), tuple2.getTupleDesc()));
                    // OpIterator is iterator of tuples with same TupleDesc?
                    // Tuple tuple = new Tuple(getTupleDesc());
                    int count = 0;
                    for (int i = 0; i < tuple1.getTupleDesc().numFields(); i++) {
                        newTuple.setField(count++, tuple1.getField(i));
                    }
                    for (int i = 0; i < tuple2.getTupleDesc().numFields(); i++) {
                        newTuple.setField(count++, tuple2.getField(i));
                    }
                    /*if (fetchedTuple == null) {
                        fetchedTuple = newTuple;
                        return newTuple;
                    } else if (fetchedTuple.toString().equals(newTuple.toString())){
                        continue;
                    } else {
                        fetchedTuple = newTuple;
                        return newTuple;
                    }*/
                    /*if (joinedTuples.containsKey(newTuple.toString())){
                        continue;
                    }
                    joinedTuples.put(newTuple.toString(), newTuple);*/
                    return newTuple;
                }
            }
            child2.rewind();
            tuple2 = null;
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        OpIterator[] children = new OpIterator[opIterators.size()];
        for (int i = 0; i < children.length; i++) {
            children[i] = opIterators.get(i);
        }
        return children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        for (int i = 0; i < children.length; i++) {
            opIterators.add(i,children[i]);
        }
    }

}
